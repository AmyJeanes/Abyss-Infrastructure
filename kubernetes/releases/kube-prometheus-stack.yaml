prometheus-node-exporter:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: type
            operator: NotIn
            values:
            - virtual-kubelet
alertmanager:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
    tls:
    - secretName: alertmanager-tls
  config:
    route:
      receiver: pagerduty
      routes:
      - matchers:
        - alertname = Watchdog
        receiver: deadmanssnitch
        repeat_interval: 15m
      - matchers:
        - alertname = InfoInhibitor
        receiver: null
    receivers:
    - name: pagerduty
    - name: deadmanssnitch
      webhook_configs:
      - send_resolved: false
    inhibit_rules:
    - equal:
      - namespace
      - alertname
      source_matchers:
      - severity = critical
      target_matchers:
      - severity =~ warning|info
    - equal:
      - namespace
      - alertname
      source_matchers:
      - severity = warning
      target_matchers:
      - severity = info
    - equal:
      - namespace
      source_matchers:
      - alertname = InfoInhibitor
      target_matchers:
      - severity = info
grafana:
  sidecar:
    dashboards:
      enabled: true
      searchNamespace: ALL
    datasources:
      enabled: true
      searchNamespace: ALL
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
    tls:
    - secretName: grafana-tls
prometheus:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
    tls:
    - secretName: prometheus-tls
kubeScheduler:
  enabled: false
kubeControllerManager:
  enabled: false
kubeProxy:
  enabled: false
defaultRules:
  disabled:
    TargetDown: true
additionalPrometheusRulesMap:
  patched-default-rules:
    groups:
    - name: general.rules
      rules:
      - alert: TargetDown
        annotations:
          description: '{{ printf "%.4g" $value }}% of the {{ $labels.job }}/{{ $labels.service }} targets in {{ $labels.namespace }} namespace are down.'
          summary: One or more targets are unreachable.
        # Ignore virtual node
        expr: 100 * (count by(job, namespace, service) (up{node != "virtual-node-aci-linux"} == 0) / count by(job, namespace, service) (up{node != "virtual-node-aci-linux"})) > 10
        for: 10m
        labels:
          severity: warning
