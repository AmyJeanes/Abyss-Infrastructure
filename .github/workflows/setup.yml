name: Setup

on:
  workflow_dispatch:
    inputs:
      planOnly:
        description: 'Terraform plan only (do not apply)'
        required: true
        default: 'false'

jobs:
  setup:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
                    
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_wrapper: false
        
      - name: Terraform Init
        run: terraform init -backend-config="storage_account_name=abyssterraform" -backend-config="container_name=terraform" -backend-config="key=terraform.tfstate" -backend-config="access_key=${{ secrets.TERRAFORM_STORAGE_ACCOUNT_KEY }}" -upgrade
        working-directory: terraform
        
      - name: Set Terraform variables
        run: |
          tee terraform.tfvars <<EOF
          kubernetes_version = "${{ secrets.KUBERNETES_VERSION }}"
          ssh_public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
          EOF
        working-directory: terraform
        
      - name: Terraform Plan
        run: terraform plan -out tfplan
        working-directory: terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      
      - name: Terraform Validate and Apply
        run: terraform apply tfplan
        working-directory: terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        if: github.event.inputs.planOnly == 'false'
        
      - name: Retrieve terraform outputs
        run: |
          $outputs = terraform output -json | ConvertFrom-Json -AsHashTable
          $outputs.Keys | ForEach-Object {
              $key = $_
              $output = $outputs[$key]
              $value = $output.value
              $sensitive = $output.sensitive
              
              Write-Host "$key = $(($sensitive ? "***" : $value))"
              "$key=$value" >> $env:GITHUB_ENV
          }
        shell: pwsh
        working-directory: terraform
      
      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Kubernetes
        uses: Azure/aks-set-context@v2.1
        with:
          resource-group: abyss
          cluster-name: abyss
          
      - name: Install Nginx Ingress
        run: |
          helm upgrade --install --wait --atomic --debug \
            ingress-nginx ingress-nginx \
            --repo https://kubernetes.github.io/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --version 4.1.0
            --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-resource-group"="abyss" \
            --set controller.service.loadBalancerIP="${{ env.public_ip_address }}" \
            --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz # https://github.com/Azure/AKS/issues/2903
            
      - name: Install Cert Manager
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm install  --install --wait --atomic --debug \
            cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --version v1.8.0 \
            --set installCRDs=true
            
      - name: Add cluster issuers
        run: sed 's/${email}/${{ secrets.EMAIL }}/g' kubernetes/cluster-issuer.yml | kubectl apply -f -
