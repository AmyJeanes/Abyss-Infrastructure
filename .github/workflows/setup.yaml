name: Setup

on:
  workflow_dispatch:
    inputs:
      planOnly:
        description: 'Terraform plan only (do not apply)'
        required: true
        default: 'false'

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Check for existing AKS cluster
        run: |
          if ((az group exists -n abyss) -eq "true" -and (az aks list -g "abyss" -o json | ConvertFrom-Json).name -eq "abyss") {
              Write-Host "Cluster already exists, logging in"
              az aks get-credentials --resource-group abyss --name abyss --admin
              if ($LASTEXITCODE -ne 0) {
                  Write-Error "az exited with code $LASTEXITCODE"
              }
              "aks_login=false" >> $env:GITHUB_ENV

          } else {
              Write-Host "Cluster does not yet exist, setting Terraform to perform login after creation"
              "aks_login=true" >> $env:GITHUB_ENV
          }
        shell: pwsh
                    
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_wrapper: false
        
      - name: Terraform Init
        run: terraform init -backend-config="storage_account_name=abyssterraform" -backend-config="container_name=terraform" -backend-config="key=terraform.tfstate" -backend-config="access_key=${{ secrets.TERRAFORM_STORAGE_ACCOUNT_KEY }}" -upgrade
        working-directory: terraform
        
      - name: Set Terraform variables
        run: |
          tee terraform.tfvars <<EOF
          kubernetes_version = "${{ secrets.KUBERNETES_VERSION }}"
          ssh_public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
          cloudflare_api_token = "${{ secrets.CLOUDFLARE_API_TOKEN }}"
          cloudflare_zone_id = "${{ secrets.CLOUDFLARE_ZONE_ID }}"
          home_ip = "${{ secrets.HOME_IP }}"
          mariadb_root_password = "${{ secrets.MARIADB_ROOT_PASSWORD }}"
          email = "${{ secrets.EMAIL }}"
          host = "${{ secrets.HOST }}"
          aks_login = ${{ env.aks_login }}
          oauth2_client_id = "${{ secrets.OAUTH2_CLIENT_ID }}"
          oauth2_client_secret = "${{ secrets.OAUTH2_CLIENT_SECRET }}"
          oauth2_cookie_secret = "${{ secrets.OAUTH2_COOKIE_SECRET }}"
          grafana_admin_password = "${{ secrets.GRAFANA_ADMIN_PASSWORD }}"
          pagerduty_url = "${{ secrets.PAGERDUTY_URL }}"
          pagerduty_integration_key = "${{ secrets.PAGERDUTY_INTEGRATION_KEY }}"
          dead_mans_snitch_webhook_url = "${{ secrets.DEAD_MANS_SNITCH_WEBHOOK_URL }}"
          EOF
        working-directory: terraform
        
      - name: Terraform Plan
        run: terraform plan -out tfplan
        working-directory: terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      
      - name: Terraform Validate and Apply
        run: terraform apply tfplan
        working-directory: terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        if: github.event.inputs.planOnly == 'false'
