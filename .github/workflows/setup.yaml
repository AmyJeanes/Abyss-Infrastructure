name: Setup

on:
  workflow_dispatch:

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -backend-config="storage_account_name=abyssterraform" -backend-config="container_name=terraform" -backend-config="key=terraform.tfstate" -backend-config="access_key=${{ secrets.TERRAFORM_STORAGE_ACCOUNT_KEY }}" -upgrade
        working-directory: terraform

      - name: Set Terraform variables
        run: |
          tee terraform.tfvars <<EOF
          kubernetes_version = "${{ vars.KUBERNETES_VERSION }}"
          ssh_public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
          cloudflare_api_token = "${{ secrets.CLOUDFLARE_API_TOKEN }}"
          cloudflare_zone_id = "${{ vars.CLOUDFLARE_ZONE_ID }}"
          home_ip = "${{ secrets.HOME_IP }}"
          windows_server_password = "${{ secrets.WINDOWS_SERVER_PASSWORD }}"
          EOF
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -out tfplan
        working-directory: terraform
        env:
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name: Terraform Validate and Apply
        run: terraform apply tfplan
        working-directory: terraform
        env:
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name: Retrieve terraform outputs
        run: |
          $outputs = terraform output -json | ConvertFrom-Json -AsHashTable
          $outputs.Keys | ForEach-Object {
              $key = $_
              $output = $outputs[$key]
              $value = $output.value
              $sensitive = $output.sensitive
              
              Write-Host "$key = $(($sensitive ? "***" : $value))"
              if ($sensitive) {
                Write-Host "::add-mask::$value"
              }
              "$key=$value" >> $env:GITHUB_ENV
          }
        shell: pwsh
        working-directory: terraform

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Kubernetes
        uses: Azure/aks-set-context@v3
        with:
          resource-group: abyss
          cluster-name: abyss

      - name: Set common variables
        run: |
          $variables = @{
            hello_world_host = "hello-world.${{ vars.HOST }}"
            alertmanager_host = "alertmanager.${{ vars.HOST }}"
            grafana_host = "grafana.${{ vars.HOST }}"
            prometheus_host = "prometheus.${{ vars.HOST }}"
            sinusbot_host = "musicbot.${{ vars.HOST }}"
            qbittorrent_host = "torrent.${{ vars.HOST }}"
            teamspeak_host = "ts.${{ vars.HOST }}"
            teslamate_host = "teslamate.${{ vars.HOST }}"
            influxdb_host = "influxdb.${{ vars.HOST }}"
            mqtt_host = "mqtt.${{ vars.HOST }}"
            send_host = "send.${{ vars.HOST }}"
            main_host = "${{ vars.HOST }}"
            cdn_host = "cdn.${{ vars.HOST }}"
            auth_host = "auth.${{ vars.HOST }}"
            auth_url = "http://oauth2-proxy.oauth2-proxy.svc.cluster.local/oauth2/auth"
            auth_signin = "https://auth.${{ vars.HOST }}/oauth2/start?rd=\`$scheme://\`$host\`$request_uri"
          }
          $variables.Keys | ForEach-Object {
              $key = $_
              $value = $variables[$key]
              Write-Host "$key = $value"
              "$key=$value" >> $env:GITHUB_ENV
          }
        shell: pwsh

      - name: Install storage-account-secret
        run: |
          helm upgrade --install --wait --atomic --debug \
            storage-account-secret ./storage-account-secret \
            --namespace default \
            --set storageAccountName="${{ env.storage_account_name }}" \
            --set storageAccountKey="${{ env.storage_account_key }}"
        working-directory: kubernetes/charts

      - name: Add github-registry secret
        run: |
          kubectl -n default create secret docker-registry github-registry \
            --docker-server=ghcr.io \
            --docker-username="${{ github.actor }}" \
            --docker-password="${{ secrets.ABYSS_GITHUB_REGISTRY_PAT }}" \
            --docker-email="${{ vars.EMAIL }}" \
            --dry-run=client -o yaml --save-config | kubectl apply -f -

      # https://artifacthub.io/packages/helm/ingress-nginx/ingress-nginx
      - name: Install ingress-nginx
        run: |
          helm upgrade --install --wait --atomic --debug \
            ingress-nginx ingress-nginx \
            --repo https://kubernetes.github.io/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --version 4.4.2 \
            -f ingress-nginx.yaml \
            --set controller.service.annotations.service\\.beta\\.kubernetes\\.io/azure-load-balancer-ipv4="${{ env.public_ip_address }}"
        working-directory: kubernetes/releases

      # https://artifacthub.io/packages/helm/cert-manager/cert-manager
      - name: Install cert-manager
        run: |
          helm upgrade --install --wait --atomic --debug \
            cert-manager cert-manager \
            --repo https://charts.jetstack.io \
            --namespace cert-manager \
            --create-namespace \
            --version 1.11.0 \
            -f cert-manager.yaml
        working-directory: kubernetes/releases

      - name: Install certificate-issuers
        run: |
          helm upgrade --install --wait --atomic --debug \
            certificate-issuers ./certificate-issuers \
            --namespace cert-manager \
            --set letsEncrypt.email="${{ vars.EMAIL }}"
        working-directory: kubernetes/charts

      - name: Install Hello World
        run: |
          helm upgrade --install --wait --atomic --debug \
            hello-world ./hello-world \
            --namespace default \
            --set host="${{ env.hello_world_host }}"
        working-directory: kubernetes/charts

      - name: Wait for hello world certificate to be ready
        run: ./WaitKubeCertificate.ps1 -Name "hello-world-tls"
        shell: pwsh
        working-directory: scripts

      # https://artifacthub.io/packages/helm/oauth2-proxy/oauth2-proxy
      - name: Install oauth2-proxy
        run: |
          helm upgrade --install --wait --atomic --debug \
            oauth2-proxy oauth2-proxy \
            --repo https://oauth2-proxy.github.io/manifests \
            --namespace oauth2-proxy \
            --create-namespace \
            --version 6.8.0 \
            -f oauth2-proxy.yaml \
            --set config.clientID="${{ vars.OAUTH2_CLIENT_ID }}" \
            --set config.clientSecret="${{ secrets.OAUTH2_CLIENT_SECRET }}" \
            --set config.cookieSecret="${{ secrets.OAUTH2_COOKIE_SECRET }}" \
            --set authenticatedEmailsFile.restricted_access="${{ vars.EMAIL }}" \
            --set ingress.hosts[0]="${{ env.auth_host }}" \
            --set ingress.tls[0].hosts[0]="${{ env.auth_host }}" \
            --set extraArgs.whitelist-domain=".${{ vars.HOST }}" \
            --set extraArgs.cookie-domain=".${{ vars.HOST }}"
        working-directory: kubernetes/releases

      - name: Wait for oauth2-proxy certificate to be ready
        run: ./WaitKubeCertificate.ps1 -Name "oauth2-proxy-tls" -Namespace "oauth2-proxy"
        shell: pwsh
        working-directory: scripts

      # https://artifacthub.io/packages/helm/fairwinds-stable/vpa
      - name: Install vpa
        run: |
          helm upgrade --install --wait --atomic --debug \
            vpa vpa \
            --repo https://charts.fairwinds.com/stable \
            --namespace vpa \
            --create-namespace \
            --version 1.6.1 \
            -f vpa.yaml
        working-directory: kubernetes/releases

      - name: Install persistent volume for prometheus
        run: |
          helm upgrade --install --wait --atomic --debug \
            prometheus-persistentvolume ./azure-persistentvolume \
            --namespace monitoring \
            --create-namespace \
            --set name=prometheus \
            --set disk.capacity=4Gi \
            --set disk.id="${{ env.prometheus_disk_id }}" \
            --set persistentVolumeClaim.enabled=false
        working-directory: kubernetes/charts

      - name: Install persistent volume for alertmanager
        run: |
          helm upgrade --install --wait --atomic --debug \
            alertmanager-persistentvolume ./azure-persistentvolume \
            --namespace monitoring \
            --create-namespace \
            --set name=alertmanager \
            --set disk.capacity=4Gi \
            --set disk.id="${{ env.alertmanager_disk_id }}" \
            --set persistentVolumeClaim.enabled=false
        working-directory: kubernetes/charts

      - name: Install persistent volume for grafana
        run: |
          helm upgrade --install --wait --atomic --debug \
            grafana-persistentvolume ./azure-persistentvolume \
            --namespace monitoring \
            --create-namespace \
            --set name=grafana \
            --set disk.capacity=1Gi \
            --set useFileShare=true \
            --set fileShare.name=grafana
        working-directory: kubernetes/charts

      # https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack
      - name: Install prometheus
        run: |
          helm upgrade --install --wait --atomic --debug \
            kube-prometheus-stack kube-prometheus-stack \
            --repo https://prometheus-community.github.io/helm-charts \
            --namespace monitoring \
            --create-namespace \
            --version 45.0.0 \
            -f kube-prometheus-stack.yaml \
            --set alertmanager.ingress.hosts[0]="${{ env.alertmanager_host }}" \
            --set alertmanager.ingress.tls[0].hosts[0]="${{ env.alertmanager_host }}" \
            --set alertmanager.ingress.annotations.nginx\\.ingress\\.kubernetes\\.io/auth-url="${{ env.auth_url }}" \
            --set alertmanager.ingress.annotations.nginx\\.ingress\\.kubernetes\\.io/auth-signin="${{ env.auth_signin }}" \
            --set alertmanager.config.global.pagerduty_url="${{ vars.PAGERDUTY_URL }}" \
            --set alertmanager.config.receivers[0].pagerduty_configs[0].routing_key="${{ secrets.PAGERDUTY_INTEGRATION_KEY }}" \
            --set alertmanager.config.receivers[1].webhook_configs[0].url="${{ secrets.DEAD_MANS_SNITCH_WEBHOOK_URL }}" \
            --set grafana.ingress.hosts[0]="${{ env.grafana_host }}" \
            --set grafana.ingress.tls[0].hosts[0]="${{ env.grafana_host }}" \
            --set grafana.adminPassword="${{ secrets.GRAFANA_ADMIN_PASSWORD }}" \
            --set prometheus.ingress.hosts[0]="${{ env.prometheus_host }}" \
            --set prometheus.ingress.tls[0].hosts[0]="${{ env.prometheus_host }}" \
            --set prometheus.ingress.annotations.nginx\\.ingress\\.kubernetes\\.io/auth-url="${{ env.auth_url }}" \
            --set prometheus.ingress.annotations.nginx\\.ingress\\.kubernetes\\.io/auth-signin="${{ env.auth_signin }}"
        working-directory: kubernetes/releases

      - name: Install prometheus-vpa
        run: |
          helm upgrade --install --wait --atomic --debug \
            prometheus-vpa ./prometheus-vpa \
            --namespace monitoring
        working-directory: kubernetes/charts

      - name: Wait for kube-prometheus-stack certificates to be ready
        run: |
          ./WaitKubeCertificate.ps1 -Name "prometheus-tls" -Namespace "monitoring"
          ./WaitKubeCertificate.ps1 -Name "alertmanager-tls" -Namespace "monitoring"
          ./WaitKubeCertificate.ps1 -Name "grafana-tls" -Namespace "monitoring"
        shell: pwsh
        working-directory: scripts

      - name: Test auth redirect for kube-prometheus-stack
        run: |
          ./TestAuthRedirect.ps1 -Url "https://${{ env.prometheus_host }}"
          ./TestAuthRedirect.ps1 -Url "https://${{ env.alertmanager_host }}"
        shell: pwsh
        working-directory: scripts

      - name: Install persistent volume for teamspeak
        run: |
          helm upgrade --install --wait --atomic --debug \
            teamspeak-persistentvolume ./azure-persistentvolume \
            --namespace default \
            --set name=teamspeak \
            --set disk.capacity=10Gi \
            --set useFileShare=true \
            --set fileShare.name=teamspeak
        working-directory: kubernetes/charts

      # https://artifacthub.io/packages/helm/k8s-at-home/teamspeak
      - name: Install teamspeak
        run: |
          helm upgrade --install --wait --atomic --debug \
            teamspeak teamspeak \
            --repo https://k8s-at-home.com/charts \
            --namespace default \
            --version 0.7.2 \
            -f teamspeak.yaml \
            --set service.main.annotations.service\\.beta\\.kubernetes\\.io/azure-load-balancer-ipv4="${{ env.public_ip_address }}" \
            --set service.udp.annotations.service\\.beta\\.kubernetes\\.io/azure-load-balancer-ipv4="${{ env.public_ip_address }}" \
            --set env.TS3SERVER_SERVERADMIN_PASSWORD="${{ secrets.TEAMSPEAK_SERVERADMIN_PASSWORD }}"
        working-directory: kubernetes/releases

      - name: Install redirect for teamspeak
        run: |
          helm upgrade --install --wait --atomic --debug \
            teamspeak-redirect ./ingress-redirect \
            --namespace default \
            --set host="${{ env.teamspeak_host }}" \
            --set redirect="ts3server://\$HOST"
        working-directory: kubernetes/charts

      - name: Wait for teamspeak redirect certificate to be ready
        run: ./WaitKubeCertificate.ps1 -Name "teamspeak-redirect-tls"
        shell: pwsh
        working-directory: scripts

      - name: Install persistent volume for teamspeak-alt
        run: |
          helm upgrade --install --wait --atomic --debug \
            teamspeak-alt-persistentvolume ./azure-persistentvolume \
            --namespace default \
            --set name=teamspeak-alt \
            --set disk.capacity=10Gi \
            --set useFileShare=true \
            --set fileShare.name=teamspeak-alt
        working-directory: kubernetes/charts

      # https://artifacthub.io/packages/helm/k8s-at-home/teamspeak
      - name: Install teamspeak-alt
        run: |
          helm upgrade --install --wait --atomic --debug \
            teamspeak-alt teamspeak \
            --repo https://k8s-at-home.com/charts \
            --namespace default \
            --version 0.7.2 \
            -f teamspeak-alt.yaml \
            --set service.main.annotations.service\\.beta\\.kubernetes\\.io/azure-load-balancer-ipv4="${{ env.public_ip_address }}" \
            --set service.udp.annotations.service\\.beta\\.kubernetes\\.io/azure-load-balancer-ipv4="${{ env.public_ip_address }}" \
            --set env.TS3SERVER_SERVERADMIN_PASSWORD="${{ secrets.TEAMSPEAK_SERVERADMIN_PASSWORD }}"
        working-directory: kubernetes/releases

      - name: Install persistent volume for sinusbot
        run: |
          helm upgrade --install --wait --atomic --debug \
            sinusbot-persistentvolume ./azure-persistentvolume \
            --namespace default \
            --set name=sinusbot \
            --set disk.capacity=10Gi \
            --set useFileShare=true \
            --set fileShare.name=sinusbot \
            --set fileShare.uid=1001 \
            --set fileShare.gid=1001
        working-directory: kubernetes/charts

      # https://artifacthub.io/packages/helm/k8s-at-home/sinusbot
      - name: Install sinusbot
        run: |
          helm upgrade --install --wait --atomic --debug \
            sinusbot sinusbot \
            --repo https://k8s-at-home.com/charts \
            --namespace default \
            --version 0.4.2 \
            -f sinusbot.yaml \
            --set ingress.main.hosts[0].host="${{ env.sinusbot_host }}" \
            --set ingress.main.tls[0].hosts[0]="${{ env.sinusbot_host }}"
        working-directory: kubernetes/releases

      - name: Wait for sinusbot certificate to be ready
        run: ./WaitKubeCertificate.ps1 -Name "sinusbot-tls"
        shell: pwsh
        working-directory: scripts

      - name: Install persistent volume for postgresql
        run: |
          helm upgrade --install --wait --atomic --debug \
            postgresql-persistentvolume ./azure-persistentvolume \
            --namespace default \
            --set name=postgresql \
            --set disk.capacity=4Gi \
            --set disk.id="${{ env.postgresql_disk_id }}"
        working-directory: kubernetes/charts

      # https://artifacthub.io/packages/helm/bitnami/postgresql
      - name: Install postgresql
        run: |
          helm upgrade --install --wait --atomic --debug \
            postgresql postgresql \
            --repo https://charts.bitnami.com/bitnami \
            --namespace default \
            --version 12.1.15 \
            -f postgresql.yaml \
            --set auth.postgresPassword="${{ secrets.POSTGRESQL_POSTGRES_PASSWORD }}" \
            --set primary.service.annotations.service\\.beta\\.kubernetes\\.io/azure-load-balancer-ipv4="${{ env.public_ip_address }}"
        working-directory: kubernetes/releases

      # https://artifacthub.io/packages/helm/k8s-at-home/teslamate
      - name: Install teslamate
        run: |
          helm upgrade --install --wait --atomic --debug \
            teslamate teslamate \
            --repo https://k8s-at-home.com/charts \
            --namespace default \
            --version 7.0.1 \
            -f teslamate.yaml \
            --set image.tag="${{ vars.TESLAMATE_VERSION }}" \
            --set ingress.main.hosts[0].host="${{ env.teslamate_host }}" \
            --set ingress.main.tls[0].hosts[0]="${{ env.teslamate_host }}" \
            --set ingress.main.annotations.nginx\\.ingress\\.kubernetes\\.io/auth-url="${{ env.auth_url }}" \
            --set ingress.main.annotations.nginx\\.ingress\\.kubernetes\\.io/auth-signin="${{ env.auth_signin }}" \
            --set env.DATABASE_PASS="${{ secrets.POSTGRESQL_TESLAMATE_PASSWORD }}" \
            --set env.ENCRYPTION_KEY="${{ secrets.TESLAMATE_ENCRYPTION_KEY }}" \
            --set env.MQTT_HOST="${{ env.mqtt_host }}" \
            --set env.MQTT_USERNAME="${{ vars.TESLAMATE_MQTT_USERNAME }}" \
            --set env.MQTT_PASSWORD="${{ secrets.TESLAMATE_MQTT_PASSWORD }}"
        working-directory: kubernetes/releases

      - name: Wait for teslamate certificate to be ready
        run: ./WaitKubeCertificate.ps1 -Name "teslamate-tls"
        shell: pwsh
        working-directory: scripts

      - name: Test auth redirect for teslamate
        run: |
          ./TestAuthRedirect.ps1 -Url "https://${{ env.teslamate_host }}"
        shell: pwsh
        working-directory: scripts

      - name: Prepare teslamate grafana dashboards
        run: |
          $tempDirectory = $env:RUNNER_TEMP
          $teslamateVersion = $env:TESLAMATE_VERSION

          $teslamatePath = Join-Path $tempDirectory "teslamate"
          $dashboardsPath = Join-Path "dashboards" "teslamate"

          git clone https://github.com/adriankumpf/teslamate.git $teslamatePath
          if ($LASTEXITCODE -ne 0) {
              Write-Error "git exited with code $LASTEXITCODE"
          }
          git -C $teslamatePath checkout $teslamateVersion
          if ($LASTEXITCODE -ne 0) {
              Write-Error "git exited with code $LASTEXITCODE"
          }

          $null = New-Item -Path $dashboardsPath -ItemType Directory -Force
          Copy-Item -Path (Join-Path $teslamatePath "grafana" "dashboards" "*") -Destination $dashboardsPath -Recurse

          Get-ChildItem -File -Recurse $dashboardsPath | ForEach-Object {
              Move-Item -Path $_.FullName -Destination (Join-Path $_.DirectoryName ("teslamate-" + $_.Name))
          }
        shell: pwsh
        working-directory: kubernetes/charts/grafana-dashboards
        env:
          TESLAMATE_VERSION: v${{ vars.TESLAMATE_VERSION }}

      - name: Install grafana-dashboards
        run: |
          helm upgrade --install --wait --atomic --debug \
            grafana-dashboards ./grafana-dashboards \
            --namespace default \
            --set teslamate.database.pass="${{ secrets.POSTGRESQL_TESLAMATE_PASSWORD }}" \
            --set influxdb.organization="${{ vars.INFLUXDB_ORGANIZATION }}" \
            --set influxdb.token="${{ secrets.INFLUXDB_GRAFANA_API_TOKEN }}"
        working-directory: kubernetes/charts

      - name: Install youtransfer
        run: |
          helm upgrade --install --wait --atomic --debug \
            youtransfer ./youtransfer \
            --namespace default \
            --set ingress.host="${{ env.send_host }}" \
            --set auth.username="${{ vars.YOUTRANSFER_USERNAME }}" \
            --set auth.password="${{ secrets.YOUTRANSFER_PASSWORD }}"
        working-directory: kubernetes/charts

      - name: Wait for youtransfer certificate to be ready
        run: ./WaitKubeCertificate.ps1 -Name "youtransfer-tls"
        shell: pwsh
        working-directory: scripts

      - name: Install persistent volume for influxdb
        run: |
          helm upgrade --install --wait --atomic --debug \
            influxdb-persistentvolume ./azure-persistentvolume \
            --namespace default \
            --set name=influxdb \
            --set disk.capacity=4Gi \
            --set disk.id="${{ env.influxdb_disk_id }}"
        working-directory: kubernetes/charts

      # https://artifacthub.io/packages/helm/bitnami/influxdb
      - name: Install influxdb
        run: |
          helm upgrade --install --wait --atomic --debug \
            influxdb influxdb \
            --repo https://charts.bitnami.com/bitnami \
            --namespace default \
            --version 5.4.15 \
            -f influxdb.yaml \
            --set auth.admin.password="${{ secrets.INFLUXDB_ADMIN_PASSWORD }}" \
            --set auth.admin.token="${{ secrets.INFLUXDB_ADMIN_TOKEN }}" \
            --set ingress.hostname="${{ env.influxdb_host }}"
        working-directory: kubernetes/releases

      - name: Install persistent volume for qbittorrent-config
        run: |
          helm upgrade --install --wait --atomic --debug \
            qbittorrent-config-persistentvolume ./azure-persistentvolume \
            --namespace default \
            --set name=qbittorrent-config \
            --set disk.capacity=1Gi \
            --set useFileShare=true \
            --set fileShare.name=qbittorrent-config \
            --set fileShare.uid=911 \
            --set fileShare.gid=911
        working-directory: kubernetes/charts

      - name: Install persistent volume for qbittorrent-downloads
        run: |
          helm upgrade --install --wait --atomic --debug \
            qbittorrent-downloads-persistentvolume ./azure-persistentvolume \
            --namespace default \
            --set name=qbittorrent-downloads \
            --set disk.capacity=100Gi \
            --set useFileShare=true \
            --set fileShare.name=qbittorrent-downloads \
            --set fileShare.uid=911 \
            --set fileShare.gid=911
        working-directory: kubernetes/charts

      # https://artifacthub.io/packages/helm/gabe565/qbittorrent
      - name: Install qBittorrent
        run: |
          helm upgrade --install --wait --atomic --debug \
            qbittorrent qbittorrent \
            --repo https://charts.gabe565.com \
            --namespace default \
            --version 0.2.2 \
            -f qbittorrent.yaml \
            --set service.bittorrent.annotations.service\\.beta\\.kubernetes\\.io/azure-load-balancer-ipv4="${{ env.public_ip_address }}" \
            --set ingress.main.hosts[0].host="${{ env.qbittorrent_host }}" \
            --set ingress.main.tls[0].hosts[0]="${{ env.qbittorrent_host }}"
        working-directory: kubernetes/releases
