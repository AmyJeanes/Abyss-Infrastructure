name: Setup

on:
  workflow_dispatch:
    inputs:
      insecureKubeContext:
        description: "Use insecure Kubernetes context"
        type: boolean
        default: false

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup OpenTofu 
        uses: opentofu/setup-opentofu@592200bd4b9bbf4772ace78f887668b1aee8f716 # v1


      - name: Terraform Init
        run: tofu init -backend-config="storage_account_name=abyssterraform" -backend-config="container_name=terraform" -backend-config="key=terraform.tfstate" -backend-config="access_key=${{ secrets.TERRAFORM_STORAGE_ACCOUNT_KEY }}" -upgrade
        working-directory: terraform

      - name: Set Terraform variables
        run: |
          tee terraform.tfvars <<EOF
          ssh_public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
          cloudflare_api_token = "${{ secrets.CLOUDFLARE_API_TOKEN }}"
          cloudflare_zone_id = "${{ vars.CLOUDFLARE_ZONE_ID }}"
          home_ip = "${{ secrets.HOME_IP }}"
          windows_server_password = "${{ secrets.WINDOWS_SERVER_PASSWORD }}"
          azure_subscription_id = "${{ vars.AZURE_SUBSCRIPTION_ID }}"
          EOF
        working-directory: terraform

      - name: Terraform Plan
        run: tofu plan -out tfplan
        working-directory: terraform
        env:
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name: Terraform Validate and Apply
        run: tofu apply tfplan
        working-directory: terraform
        env:
          ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}

      - name: Retrieve terraform outputs
        run: |
          $outputs = tofu output -json | ConvertFrom-Json -AsHashTable
          $outputs.Keys | ForEach-Object {
              $key = $_
              $output = $outputs[$key]
              $value = $output.value
              $sensitive = $output.sensitive
              
              Write-Host "$key = $(($sensitive ? "***" : $value))"
              if ($sensitive) {
                Write-Host "::add-mask::$value"
              }
              "$key=$value" >> $env:GITHUB_ENV
          }
        shell: pwsh
        working-directory: terraform

      - name: Azure Login
        uses: Azure/login@a65d910e8af852a8061c627c456678983e180302 # v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Kubernetes
        uses: azure/k8s-set-context@212a19233d93f03eceaac31ae5a1d1acf650b6ef # v4
        with:
          method: kubeconfig
          kubeconfig: "${{ inputs.insecureKubeContext && secrets.KUBECONFIG_INSECURE || secrets.KUBECONFIG }}"

      - name: Set common variables
        run: |
          $variables = @{
            hello_world_host = "hello-world.${{ vars.HOST }}"
            alertmanager_host = "alertmanager.${{ vars.HOST }}"
            grafana_host = "grafana.${{ vars.HOST }}"
            prometheus_host = "prometheus.${{ vars.HOST }}"
            sinusbot_host = "musicbot.${{ vars.HOST }}"
            qbittorrent_host = "torrent.${{ vars.HOST }}"
            teamspeak_host = "ts.${{ vars.HOST }}"
            teslamate_host = "teslamate.${{ vars.HOST }}"
            influxdb_host = "influxdb.${{ vars.HOST }}"
            mqtt_host = "mqtt.${{ vars.HOST }}"
            send_host = "send.${{ vars.HOST }}"
            main_host = "${{ vars.HOST }}"
            cdn_host = "cdn.${{ vars.HOST }}"
            auth_host = "auth.${{ vars.HOST }}"
            auth_url = "http://oauth2-proxy.oauth2-proxy.svc.cluster.local/oauth2/auth"
            auth_signin = "https://auth.${{ vars.HOST }}/oauth2/start?rd=\`$scheme://\`$host\`$request_uri"
          }
          $variables.Keys | ForEach-Object {
              $key = $_
              $value = $variables[$key]
              Write-Host "$key = $value"
              "$key=$value" >> $env:GITHUB_ENV
          }
        shell: pwsh

      - name: Run manifests
        run: |
          kubectl apply -f manifests
        working-directory: kubernetes

      - name: Install storage-account-secret
        run: |
          helm upgrade --install --wait --atomic --debug \
            storage-account-secret . \
            --namespace default \
            --set storageAccount.name="${{ env.storage_account_name }}" \
            --set storageAccount.key="${{ env.storage_account_key }}" \
            --set crypt.obscuredPassword="${{ secrets.RCLONE_CRYPT_PASSWORD }}" \
            --set crypt.obscuredSalt="${{ secrets.RCLONE_CRYPT_SALT }}"
        working-directory: kubernetes/charts/storage-account-secret

      - name: Add github-registry secret
        run: |
          kubectl -n default create secret docker-registry github-registry \
            --docker-server=ghcr.io \
            --docker-username="${{ github.actor }}" \
            --docker-password="${{ secrets.ABYSS_GITHUB_REGISTRY_PAT }}" \
            --docker-email="${{ vars.EMAIL }}" \
            --dry-run=client -o yaml --save-config | kubectl apply -f -

      - name: Install ingress-nginx
        run: |
          helm dependency update .
          helm upgrade --install --wait --atomic --debug \
            ingress-nginx . \
            --namespace ingress-nginx \
            --create-namespace \
            -f values.yaml
        working-directory: kubernetes/charts/ingress-nginx

      - name: Install cert-manager
        run: |
          helm dependency update .
          helm upgrade --install --wait --atomic --debug \
            cert-manager . \
            --namespace cert-manager \
            --create-namespace \
            -f values.yaml
        working-directory: kubernetes/charts/cert-manager

      - name: Install certificate-issuers
        run: |
          helm upgrade --install --wait --atomic --debug \
            certificate-issuers . \
            --namespace cert-manager \
            --set letsEncrypt.email="${{ vars.EMAIL }}"
        working-directory: kubernetes/charts/certificate-issuers

      - name: Install Hello World
        run: |
          helm upgrade --install --wait --atomic --debug \
            hello-world . \
            --namespace default \
            --set host="${{ env.hello_world_host }}"
        working-directory: kubernetes/charts/hello-world

      - name: Wait for hello world certificate to be ready
        run: ./WaitKubeCertificate.ps1 -Name "hello-world-tls"
        shell: pwsh
        working-directory: scripts

      - name: Install oauth2-proxy
        run: |
          helm dependency update .
          helm upgrade --install --wait --atomic --debug \
            oauth2-proxy . \
            --namespace oauth2-proxy \
            --create-namespace \
            -f values.yaml \
            --set oauth2-proxy.config.clientID="${{ vars.OAUTH2_CLIENT_ID }}" \
            --set oauth2-proxy.config.clientSecret="${{ secrets.OAUTH2_CLIENT_SECRET }}" \
            --set oauth2-proxy.config.cookieSecret="${{ secrets.OAUTH2_COOKIE_SECRET }}" \
            --set oauth2-proxy.authenticatedEmailsFile.restricted_access="${{ vars.EMAIL }}" \
            --set oauth2-proxy.ingress.hosts[0]="${{ env.auth_host }}" \
            --set oauth2-proxy.ingress.tls[0].hosts[0]="${{ env.auth_host }}" \
            --set oauth2-proxy.extraArgs.whitelist-domain=".${{ vars.HOST }}" \
            --set oauth2-proxy.extraArgs.cookie-domain=".${{ vars.HOST }}"
        working-directory: kubernetes/charts/oauth2-proxy

      - name: Wait for oauth2-proxy certificate to be ready
        run: ./WaitKubeCertificate.ps1 -Name "oauth2-proxy-tls" -Namespace "oauth2-proxy"
        shell: pwsh
        working-directory: scripts

      - name: Install vpa
        run: |
          helm dependency update .
          helm upgrade --install --wait --atomic --debug \
            vpa . \
            --namespace vpa \
            --create-namespace \
            -f values.yaml
        working-directory: kubernetes/charts/vpa

      - name: Install persistent volume for prometheus
        run: |
          helm upgrade --install --wait --atomic --debug \
            prometheus-persistentvolume . \
            --namespace monitoring \
            --create-namespace \
            --set name=prometheus \
            --set disk.capacity=8Gi \
            --set disk.id="${{ env.prometheus_disk_id }}" \
            --set persistentVolumeClaim.enabled=false
        working-directory: kubernetes/charts/azure-persistentvolume

      - name: Install persistent volume for alertmanager
        run: |
          helm upgrade --install --wait --atomic --debug \
            alertmanager-persistentvolume . \
            --namespace monitoring \
            --create-namespace \
            --set name=alertmanager \
            --set disk.capacity=4Gi \
            --set disk.id="${{ env.alertmanager_disk_id }}" \
            --set persistentVolumeClaim.enabled=false
        working-directory: kubernetes/charts/azure-persistentvolume

      - name: Install persistent volume for grafana
        run: |
          helm upgrade --install --wait --atomic --debug \
            grafana-persistentvolume . \
            --namespace monitoring \
            --create-namespace \
            --set name=grafana \
            --set disk.capacity=1Gi \
            --set useFileShare=true \
            --set fileShare.name=grafana
        working-directory: kubernetes/charts/azure-persistentvolume

      - name: Install prometheus
        run: |
          helm dependency update .
          helm upgrade --install --wait --atomic --debug \
            kube-prometheus-stack . \
            --namespace monitoring \
            --create-namespace \
            -f values.yaml \
            --set kube-prometheus-stack.alertmanager.ingress.hosts[0]="${{ env.alertmanager_host }}" \
            --set kube-prometheus-stack.alertmanager.ingress.tls[0].hosts[0]="${{ env.alertmanager_host }}" \
            --set kube-prometheus-stack.alertmanager.ingress.annotations.nginx\\.ingress\\.kubernetes\\.io/auth-url="${{ env.auth_url }}" \
            --set kube-prometheus-stack.alertmanager.ingress.annotations.nginx\\.ingress\\.kubernetes\\.io/auth-signin="${{ env.auth_signin }}" \
            --set kube-prometheus-stack.alertmanager.config.global.pagerduty_url="${{ vars.PAGERDUTY_URL }}" \
            --set kube-prometheus-stack.alertmanager.config.receivers[0].pagerduty_configs[0].routing_key="${{ secrets.PAGERDUTY_INTEGRATION_KEY }}" \
            --set kube-prometheus-stack.alertmanager.config.receivers[1].webhook_configs[0].url="${{ secrets.DEAD_MANS_SNITCH_WEBHOOK_URL }}" \
            --set kube-prometheus-stack.grafana.ingress.hosts[0]="${{ env.grafana_host }}" \
            --set kube-prometheus-stack.grafana.ingress.tls[0].hosts[0]="${{ env.grafana_host }}" \
            --set kube-prometheus-stack.grafana.adminPassword="${{ secrets.GRAFANA_ADMIN_PASSWORD }}" \
            --set kube-prometheus-stack.prometheus.ingress.hosts[0]="${{ env.prometheus_host }}" \
            --set kube-prometheus-stack.prometheus.ingress.tls[0].hosts[0]="${{ env.prometheus_host }}" \
            --set kube-prometheus-stack.prometheus.ingress.annotations.nginx\\.ingress\\.kubernetes\\.io/auth-url="${{ env.auth_url }}" \
            --set kube-prometheus-stack.prometheus.ingress.annotations.nginx\\.ingress\\.kubernetes\\.io/auth-signin="${{ env.auth_signin }}"
        working-directory: kubernetes/charts/kube-prometheus-stack

      - name: Install prometheus-vpa
        run: |
          helm upgrade --install --wait --atomic --debug \
            prometheus-vpa . \
            --namespace monitoring
        working-directory: kubernetes/charts/prometheus-vpa

      - name: Wait for kube-prometheus-stack certificates to be ready
        run: |
          ./WaitKubeCertificate.ps1 -Name "prometheus-tls" -Namespace "monitoring"
          ./WaitKubeCertificate.ps1 -Name "alertmanager-tls" -Namespace "monitoring"
          ./WaitKubeCertificate.ps1 -Name "grafana-tls" -Namespace "monitoring"
        shell: pwsh
        working-directory: scripts

      - name: Test auth redirect for kube-prometheus-stack
        run: |
          ./TestAuthRedirect.ps1 -Url "https://${{ env.prometheus_host }}"
          ./TestAuthRedirect.ps1 -Url "https://${{ env.alertmanager_host }}"
        shell: pwsh
        working-directory: scripts

      - name: Install persistent volume for teamspeak
        run: |
          helm upgrade --install --wait --atomic --debug \
            teamspeak-persistentvolume . \
            --namespace default \
            --set name=teamspeak \
            --set disk.capacity=10Gi \
            --set useFileShare=true \
            --set fileShare.name=teamspeak
        working-directory: kubernetes/charts/azure-persistentvolume

      - name: Install teamspeak
        run: |
          helm dependency update .
          helm upgrade --install --wait --atomic --debug \
            teamspeak . \
            --namespace default \
            -f values.yaml \
            --set env.TS3SERVER_SERVERADMIN_PASSWORD="${{ secrets.TEAMSPEAK_SERVERADMIN_PASSWORD }}"
        working-directory: kubernetes/charts/teamspeak

      - name: Install redirect for teamspeak
        run: |
          helm upgrade --install --wait --atomic --debug \
            teamspeak-redirect . \
            --namespace default \
            --set host="${{ env.teamspeak_host }}" \
            --set redirect="ts3server://\$HOST"
        working-directory: kubernetes/charts/ingress-redirect

      - name: Wait for teamspeak redirect certificate to be ready
        run: ./WaitKubeCertificate.ps1 -Name "teamspeak-redirect-tls"
        shell: pwsh
        working-directory: scripts

      - name: Install persistent volume for teamspeak-alt
        run: |
          helm upgrade --install --wait --atomic --debug \
            teamspeak-alt-persistentvolume . \
            --namespace default \
            --set name=teamspeak-alt \
            --set disk.capacity=10Gi \
            --set useFileShare=true \
            --set fileShare.name=teamspeak-alt
        working-directory: kubernetes/charts/azure-persistentvolume

      - name: Install teamspeak-alt
        run: |
          helm dependency update .
          helm upgrade --install --wait --atomic --debug \
            teamspeak-alt . \
            --namespace default \
            -f values.yaml \
            -f values.alt.yaml \
            --set env.TS3SERVER_SERVERADMIN_PASSWORD="${{ secrets.TEAMSPEAK_SERVERADMIN_PASSWORD }}"
        working-directory: kubernetes/charts/teamspeak

      - name: Install persistent volume for sinusbot
        run: |
          helm upgrade --install --wait --atomic --debug \
            sinusbot-persistentvolume . \
            --namespace default \
            --set name=sinusbot \
            --set disk.capacity=10Gi \
            --set useFileShare=true \
            --set fileShare.name=sinusbot \
            --set fileShare.uid=1001 \
            --set fileShare.gid=1001
        working-directory: kubernetes/charts/azure-persistentvolume

      - name: Install sinusbot
        run: |
          helm dependency update .
          helm upgrade --install --wait --atomic --debug \
            sinusbot . \
            --namespace default \
            -f values.yaml \
            --set ingress.main.hosts[0].host="${{ env.sinusbot_host }}" \
            --set ingress.main.tls[0].hosts[0]="${{ env.sinusbot_host }}"
        working-directory: kubernetes/charts/sinusbot

      - name: Wait for sinusbot certificate to be ready
        run: ./WaitKubeCertificate.ps1 -Name "sinusbot-tls"
        shell: pwsh
        working-directory: scripts

      - name: Install persistent volume for postgresql
        run: |
          helm upgrade --install --wait --atomic --debug \
            postgresql-persistentvolume . \
            --namespace default \
            --set name=postgresql \
            --set disk.capacity=4Gi \
            --set disk.id="${{ env.postgresql_disk_id }}"
        working-directory: kubernetes/charts/azure-persistentvolume

      - name: Install postgresql
        run: |
          helm dependency update .
          helm upgrade --install --wait --atomic --debug \
            postgresql . \
            --namespace default \
            -f values.yaml \
            --set postgresql.auth.postgresPassword="${{ secrets.POSTGRESQL_POSTGRES_PASSWORD }}"
        working-directory: kubernetes/charts/postgresql

      - name: Install teslamate
        run: |
          helm dependency update .
          helm upgrade --install --wait --atomic --debug \
            teslamate . \
            --namespace default \
            -f values.yaml \
            --set ingress.main.hosts[0].host="${{ env.teslamate_host }}" \
            --set ingress.main.tls[0].hosts[0]="${{ env.teslamate_host }}" \
            --set ingress.main.annotations.nginx\\.ingress\\.kubernetes\\.io/auth-url="${{ env.auth_url }}" \
            --set ingress.main.annotations.nginx\\.ingress\\.kubernetes\\.io/auth-signin="${{ env.auth_signin }}" \
            --set env.DATABASE_PASS="${{ secrets.POSTGRESQL_TESLAMATE_PASSWORD }}" \
            --set env.ENCRYPTION_KEY="${{ secrets.TESLAMATE_ENCRYPTION_KEY }}" \
            --set env.MQTT_HOST="${{ env.mqtt_host }}" \
            --set env.MQTT_USERNAME="${{ vars.TESLAMATE_MQTT_USERNAME }}" \
            --set env.MQTT_PASSWORD="${{ secrets.TESLAMATE_MQTT_PASSWORD }}"
        working-directory: kubernetes/charts/teslamate

      - name: Wait for teslamate certificate to be ready
        run: ./WaitKubeCertificate.ps1 -Name "teslamate-tls"
        shell: pwsh
        working-directory: scripts

      - name: Test auth redirect for teslamate
        run: |
          ./TestAuthRedirect.ps1 -Url "https://${{ env.teslamate_host }}"
        shell: pwsh
        working-directory: scripts

      - name: Prepare teslamate grafana dashboards
        run: |
          Install-Module powershell-yaml -Force

          $tempDirectory = $env:RUNNER_TEMP
          $teslamateVersion = "v$((Get-Content "teslamate/values.yaml" | ConvertFrom-Yaml).image.tag.Split("@")[0])"

          $teslamatePath = Join-Path $tempDirectory "teslamate"
          $dashboardsPath = Join-Path "grafana-dashboards" "dashboards" "teslamate"

          git clone https://github.com/teslamate-org/teslamate.git $teslamatePath
          if ($LASTEXITCODE -ne 0) {
              Write-Error "git exited with code $LASTEXITCODE"
          }
          git -C $teslamatePath checkout $teslamateVersion
          if ($LASTEXITCODE -ne 0) {
              Write-Error "git exited with code $LASTEXITCODE"
          }

          $null = New-Item -Path $dashboardsPath -ItemType Directory -Force
          Copy-Item -Path (Join-Path $teslamatePath "grafana" "dashboards" "*") -Destination $dashboardsPath -Recurse

          Get-ChildItem -File -Recurse $dashboardsPath | ForEach-Object {
              Move-Item -Path $_.FullName -Destination (Join-Path $_.DirectoryName ("teslamate-" + $_.Name))
          }
        shell: pwsh
        working-directory: kubernetes/charts

      - name: Install grafana-dashboards
        run: |
          helm upgrade --install --wait --atomic --debug \
            grafana-dashboards . \
            --namespace default \
            --set teslamate.database.pass="${{ secrets.POSTGRESQL_TESLAMATE_PASSWORD }}" \
            --set influxdb.organization="${{ vars.INFLUXDB_ORGANIZATION }}" \
            --set influxdb.token="${{ secrets.INFLUXDB_GRAFANA_API_TOKEN }}"
        working-directory: kubernetes/charts/grafana-dashboards

      - name: Install youtransfer
        run: |
          helm upgrade --install --wait --atomic --debug \
            youtransfer . \
            --namespace default \
            --set ingress.host="${{ env.send_host }}" \
            --set auth.username="${{ vars.YOUTRANSFER_USERNAME }}" \
            --set auth.password="${{ secrets.YOUTRANSFER_PASSWORD }}"
        working-directory: kubernetes/charts/youtransfer

      - name: Wait for youtransfer certificate to be ready
        run: ./WaitKubeCertificate.ps1 -Name "youtransfer-tls"
        shell: pwsh
        working-directory: scripts

      - name: Install persistent volume for influxdb
        run: |
          helm upgrade --install --wait --atomic --debug \
            influxdb-persistentvolume . \
            --namespace default \
            --set name=influxdb \
            --set disk.capacity=4Gi \
            --set disk.id="${{ env.influxdb_disk_id }}"
        working-directory: kubernetes/charts/azure-persistentvolume

      - name: Install influxdb
        run: |
          helm dependency update .
          helm upgrade --install --wait --atomic --debug \
            influxdb . \
            --namespace default \
            -f values.yaml \
            --set influxdb.auth.admin.password="${{ secrets.INFLUXDB_ADMIN_PASSWORD }}" \
            --set influxdb.auth.admin.token="${{ secrets.INFLUXDB_ADMIN_TOKEN }}" \
            --set influxdb.ingress.hostname="${{ env.influxdb_host }}"
        working-directory: kubernetes/charts/influxdb

      - name: Install persistent volume for qbittorrent-config
        run: |
          helm upgrade --install --wait --atomic --debug \
            qbittorrent-config-persistentvolume . \
            --namespace default \
            --set name=qbittorrent-config \
            --set disk.capacity=1Gi \
            --set useFileShare=true \
            --set fileShare.name=qbittorrent-config \
            --set fileShare.uid=911 \
            --set fileShare.gid=911
        working-directory: kubernetes/charts/azure-persistentvolume

      - name: Install qBittorrent
        run: |
          helm dependency update .
          helm upgrade --install --wait --atomic --debug \
            qbittorrent . \
            --namespace default \
            -f values.yaml \
            --set ingress.main.hosts[0].host="${{ env.qbittorrent_host }}" \
            --set ingress.main.tls[0].hosts[0]="${{ env.qbittorrent_host }}" \
            --set addons.vpn.env.OPENVPN_USER="${{ secrets.MULLVAD_ACCOUNT_NUMBER }}"
        working-directory: kubernetes/charts/qbittorrent
